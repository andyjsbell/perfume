#!jx9 rsync script
# uskee.org
#

import 'scripts/jx9_misc.jx9';

$authen = "Basic user:passwd";
$authen = "Basic YWRtaW4xOnBhc3N3ZA==";
$req_uri = "GET /test_db HTTP/1.1";
$req_data = "";

function test_http_send()
{
    uplink $req_uri;
    uplink $req_data;
    uplink $authen;

    $host = "127.0.0.1";
    $port = 5984;

    if (strstr($req_uri, "GET")) {
        $req_data = "";
    }

    $req_head = {
    "Host": "$host:$port",
    "User-Agent": "Jx9Agent/1.0",
    "Accept": "application/json",
    "Authorization": $authen;
    "Content-Type": "application/json",
    "Content-Length": strlen($req_data),
    };

    ####################
    $req = {
    uri: $req_uri,
    head: $req_head,
    data: $req_data,
    host: $host,
    port: $port,
    };
    return send_http($req);
}

#print test_http_send();
#return;


########
# step1: get account info from test_account, and then get all database's uuid.
#$req_uri = "GET /test_db/_all_docs HTTP/1.1";
#$resp = test_http_send();
#print $resp;
#if ($resp["content"][0] && $resp["content"][1]) {
#    print $resp;
#    $all_docs = $resp["content"][1];
#    print $all_docs;
#}

function test_neon_http()
{
    $proto = {scheme:"http", hostname:"127.0.0.1", port: 5984};
    $session = ne_session_create($proto);
    if ($session <= 0) {
        print "[error] fail to ne_session_create";
        return;
    }
    ne_set_useragent({session:$session, product:"Jx9Agent/1.0"});

    $head = {session:$session, method:"GET", path:"/test_db/_all_docs"};
    $request = ne_request_create($head);
    if ($request <= 0) {
        print "[error] fail to ne_request_create";
        return;
    }

    # add header
    $req_head = {
        "Host": "127.0.0.1:5984",
        #"User-Agent": "Jx9Agent/1.0",
        "Accept": "application/json",
        "Authorization": "Basic YWRtaW4xOnBhc3N3ZA==";
        #"Content-Type": "application/json",
        #"Content-Length": strlen($req_data),
    };
    foreach ($req_head as $key, $val) {
        ne_add_request_header({request:$request, name:$key, value:$val});
    }

    # add content and content-lenght
    $req_body = NULL;
    if ($req_body) {
        $ctype = {request:$request, name:"Content-Type", value:"application/json"};
        ne_add_request_header($ctype);
        $cbody = {request:$request, buffer:"$req_body", count:strlen($req_body)};
        ne_set_request_body_buffer($cbody);
    }

    $resp_body = {request:$request};
    $ret = ne_request_dispatch($resp_body);
    print "ne_request_dispatch: $ret"; 
    print json_decode($resp_body.body);

    # get response
    $resp_head = {request:$request, name:"Content-Length"};
    $ret = ne_get_response_header($resp_head);
    print "ne_get_reponse_header: $ret, $resp_head.value";

    # get status
    $resp_status = {request:$request};
    $ret = ne_get_status($resp_status);
    print "ne_get_status: $ret, $resp_status";

    $ret = ne_request_destroy({request:$request});
    print "ne_request_destroy: $ret";

    $ret = ne_close_connection({session:$session});
    print "ne_close_connection: $ret";
    $ret = ne_session_destroy({session:$session});
    print "ne_session_destroy: $ret";
}

test_neon_http();
return;





$jx9_col = "account";
if (!db_exists($jx9_col)) {
    log_error(db_errlog());
    return $jx9_err.e_db_exists;
}

while(($rec=db_fetch($jx9_col)) != NULL) {
    print "rec: $rec";
}

