#!jx9 rsync script
# uskee.org
#

function parse_http($msg)
{
    $off = strpos($msg, "\r\n\r\n");
    if (!$off) 
        return false;

    $len = strlen($msg);
    $head = substr($msg, 0, $off);
    $content = substr($msg, $off+4, $len-$off-4);
    #print "len: $len, head: $off, content: strlen($content)";

    $http = explode("\r\n", $head);
    foreach ($http as $line) {
        $kv = explode(": ", $line, 2);
        if (sizeof($kv) == 2) {
            $resp[strtolower($kv[0])] = $kv[1];
        }else if ($kv[0]){
            $resp["status"] = explode(" ", $kv[0], 3);
            if (sizeof($resp["status"]) > 1)
                $resp["status"][1] = (int)$resp["status"][1];
        }
    }

    $resp["content-length"] = (int)$resp["content-length"];
    $resp["content"] = [0, ""];
    if ($content)
        $resp["content"] = [strlen($content), json_decode($content)];
    return $resp;
}

function send_http($req)
{
    foreach ($req.head as $key, $val) {
        if ($val)
            $shttp = $shttp .. "$key: $val\r\n";
    }
    $shttp = "$req.uri\r\n$shttp\r\n";

    $sock = socket();
    if ($sock <= 0) {
        print "socket() failed and return $ret";
        return NULL;
    }

    while(true){
        # connect server
        $ret = connect({sock:$sock, host:$req.host, port:$req.port});
        if ($ret != 0) {
            print "connect() failed and return $ret";
            break;
        }

        # send http head
        $ret = send({sock:$sock, msg:$shttp, size:strlen($shttp)});
        if ($ret <= 0) {
            print "send() failed and return $ret";
            break;
        }

        # send http content data
        if ($req.data) {
            $ret = send({sock:$sock, msg:"$req.data", size:strlen($req.data)});
            if ($ret <= 0) {
                print "send() failed and return $ret";
                break;
            }
        }

        # recv http response
        $rhttp = {sock:$sock, size:2048};
        $ret = recv($rhttp);
        if ($ret <= 0) {
            print "recv() head failed and return $ret";
            break;
        }

        $resp = parse_http($rhttp.msg); 
        if ($resp["content-length"] > $resp["content"][0]) {
            $rdata = {sock:$sock, size:$resp["content-length"]};
            $ret = recv($rdata);
            if ($ret <= 0) {
                print "recv() content failed and return $ret";
                break;
            }
            $content = json_decode("$rdata.msg");
            $resp["content"] = [strlen($rada.msg), $content];
        }
        break;
    }
    close($sock);
    return $resp;
}


$all_syncs = ["account", "database", "document"];
$jx9_col = $all_syncs[1];
#print $jx9_col;

$host = "127.0.0.1";
$port = 5984;
$authen = "Basic user:passwd";
$authen = "Basic YWRtaW4xOnBhc3N3ZA==";

$req_uri = "GET /test_db HTTP/1.1";
$req_data = "test";
if (strstr($req_uri, "GET")) {
    $req_data = "";
}
/*
$req_data = <<<EOD
function(doc) {
  var shop, price, value;
  if (doc.item && doc.prices) {
      for (shop in doc.prices) {
          price = doc.prices[shop];
          value = [doc.item, shop];
          emit(price, value);
      }
  }
}
EOD;
*/

$req_head = {
    "Host": "$host:$port",
    "User-Agent": "Jx9Agent/1.0",
    "Accept": "application/json",
    "Authorization": $authen;
    "Content-Type": "application/json",
    "Content-Length": strlen($req_data),
};

####################
$req = {
    uri: $req_uri,
    head: $req_head,
    data: $req_data,
    host: $host,
    port: $port,
};

$resp["test"] = "";
print strlen($resp["test"]);
$resp = send_http($req);
print $resp;

if (!db_exists($jx9_col)) {
    log_error(db_errlog());
    return $jx9_err.e_db_exists;
}

while(($rec=db_fetch($jx9_col)) != NULL) {
    print "rec: $rec";
}

