#!jx9 rsync script
# uskee.org
#

function parse_http($msg)
{
    $off = strpos($msg, "\r\n\r\n");
    if (!$off) 
        return false;

    $len = strlen($msg);
    $head = substr($msg, 0, $off);
    $content = substr($msg, $off+4, $len-$off-4);

    $http = explode("\r\n", $head);
    foreach ($http as $line) {
        $kv = explode(": ", $line, 2);
        if (sizeof($kv) == 2) {
            $resp[strtolower($kv[0])] = $kv[1];
        }else if ($kv){
            $resp["status"] = explode(" ", $kv[0], 3);
        }
    }

    if ($resp["content-length"]) {
        $resp["content-length"] = (int)$resp["content-length"];
    }else {
        $resp["content-length"] = 0;
    }

    if ($content) {
        $resp["content"] = json_decode($content);
        $resp["content"]["length"] = strlen($content);
    }else {
        $resp["content"] = "";
        $resp["content"]["length"] = 0;
    }

    if (sizeof($resp["status"]) > 1) {
        $resp["status"][1] = (int)$resp["status"][1];
    }

    return $resp;
}

function send_http($req)
{
    $cmd = strtoupper($req.cmd);
    $shttp = "$cmd $req.uri HTTP/1.1\r\n" ..
        "Host: $req.host:$req.port\r\n" ..
        "Accept: $req.accept\r\n";

    if (($cmd == "PUT" || $cmd = "POST") && $req.content) {
        $length = strlen($req.content);
        $shttp = $shttp .. "Content-Length: $length\r\n";
    }
    $shttp = $shttp .. "\r\n";
    #print "send http: $shttp";

    $sock = socket();
    if ($sock <= 0) {
        print "socket() failed and return $ret";
        return false;
    }

    while(true){
        # connect server
        $ret = connect({sock:$sock, host:$req.host, port:$req.port});
        if ($ret != 0) {
            print "connect() failed and return $ret";
            break;
        }

        # send http head
        $ret = send({sock:$sock, msg:$shttp, size:strlen($shttp)});
        if ($ret <= 0) {
            print "send() failed and return $ret";
            break;
        }

        # send http content data
        if ($req.content) {
            $ret = send({sock:$sock, msg:$req.content, size:strlen($req.content)});
            if ($ret <= 0) {
                print "send() failed and return $ret";
                break;
            }
        }

        # recv http response
        $rhttp = {sock:$sock, size:2048};
        $ret = recv($rhttp);
        if ($ret <= 0) {
            print "recv() head failed and return $ret";
            break;
        }

        $resp = parse_http($rhttp.msg); 
        #print "recv msg: $resp";
        if ($resp["content-length"] > $resp["content"]["length"]) {
            # recv http content data
            $rdata = {sock:$sock, size:$resp["content-length"]};
            #print "rdata: $rdata";
            $ret = recv($rdata);
            if ($ret <= 0) {
                print "recv() content failed and return $ret";
                break;
            }
            $resp["content"] = json_decode($rdata.msg);
            $resp["content"]["length"] = strlen($rdata.msg);
            #print "content: " .. $resp["content"];
        }
        break;
    }
    close($sock);

    return $resp;
}


$all_syncs = ["account", "database", "document"];
$jx9_col = $all_syncs[1];
print $jx9_col;

$req = {
    cmd: "PUT", # GET, PUT, POST
    uri: "/test_account",
    host: "127.0.0.1",
    port: 5984,
    accept: "application/json",
    content: "test",
};
$resp = send_http($req);
print $resp;

if (!db_exists($jx9_col)) {
    log_error(db_errlog());
    return $jx9_err.e_db_exists;
}

while(($rec=db_fetch($jx9_col)) != NULL) {
    print "rec: $rec";
}

