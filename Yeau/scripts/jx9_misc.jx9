#!jx9 misc script
# uskee.org
#

$jx9_err = {
    s_ok:           {ret: 0,    msg: jx9_s_ok},
    s_false:        {ret: -1,   msg: jx9_s_false},
    e_fail:         {ret: 1,    msg: jx9_e_fail},
    e_uri:          {ret: 10,   msg: jx9_e_uri},
    e_arg:          {ret: 11,   msg: jx9_e_arg},
    e_db_create:    {ret: 20,   msg: jx9_e_db_create},
    e_db_store:     {ret: 21,   msg: jx9_e_db_store},
    e_db_exists:    {ret: 22,   msg: jx9_e_db_exists},
};

## check contain relationship
function rec_contain($child, $parent) {
    if(sizeof($child) > sizeof($parent))
        return false;

    foreach($child as $key, $val)
        if($val != $parent[$key])
            return false;
    return true;
}

function rec_putter($update, $orgin) {
    foreach($update as $key, $val) {
        if ($orgin[$key] != NULL && $orgin[$key] != $val)
            $orgin[$key] = $val;
    }
    return $orgin;
}

function rec_putter($update, $orgin, $scheme) {
    $merge = array_copy($scheme);
    foreach($merge as $key, $val) {
        $merge[$key] = $orgin[$key];
    }
    return rec_putter($update, $merge);
}

function rec_getter($child, $orgin) {
    foreach($child as $key, $val) {
        if ($orgin[$key] != NULL)
            $child[$key] = $orgin[$key];
    }
    return $child;
}

function log_print($tag, $msg) {
    print "[$tag] => $msg";
}

function log_debug($msg) {
    #log_print("debug", $msg);
}

function log_info($msg) {
    #log_print("info", $msg);
}

function log_warn($msg) {
    log_print("warn", $msg);
}

function log_error($msg) {
    log_print("error", $msg);
}

function test_ex()
{
    $t1= {"1":{"2":3,"4":5},"6":7,"8":9};
    $t2= {"1":{"2":3,"4":5}};
    $t3= {"1":{"22":3,"4":5}};
    $t4= {"1":{"2":33,"4":5}};
    $t5= {"11":{"2":3,"4":5}};
    $t6= {"6":7};
    $t7= {"8":9};
    $t8= {"6":7, "8":9};

    foreach ([$t2,$t3,$t4,$t5,$t6,$t7,$t8] as $val)
        print rec_contain($val, $t1);
}

function parse_http($msg)
{
    $off = strpos($msg, "\r\n\r\n");
    if (!$off) 
        return false;

    $len = strlen($msg);
    $head = substr($msg, 0, $off);
    $content = substr($msg, $off+4, $len-$off-4);
    #print "len: $len, head: $off, content: strlen($content)";

    $http = explode("\r\n", $head);
    foreach ($http as $line) {
        $kv = explode(": ", $line, 2);
        if (sizeof($kv) == 2) {
            $resp[strtolower($kv[0])] = $kv[1];
        }else if ($kv[0]){
            $resp["status"] = explode(" ", $kv[0], 3);
            if (sizeof($resp["status"]) > 1)
                $resp["status"][1] = (int)$resp["status"][1];
        }
    }

    $resp["content-length"] = (int)$resp["content-length"];
    $resp["content"] = [0, ""];
    if ($content)
        $resp["content"] = [strlen($content), json_decode($content)];
    return $resp;
}

function send_http($req)
{
    foreach ($req.head as $key, $val) {
        if ($val)
            $shttp = $shttp .. "$key: $val\r\n";
    }
    $shttp = "$req.uri\r\n$shttp\r\n";

    $sock = socket();
    if ($sock <= 0) {
        print "socket() failed and return $ret";
        return NULL;
    }

    while(true){
        # connect server
        $ret = connect({sock:$sock, host:$req.host, port:$req.port});
        if ($ret != 0) {
            print "connect() failed and return $ret";
            break;
        }

        # send http head
        $ret = send({sock:$sock, msg:$shttp, size:strlen($shttp)});
        if ($ret <= 0) {
            print "send() failed and return $ret";
            break;
        }

        # send http content data
        if ($req.data) {
            $ret = send({sock:$sock, msg:"$req.data", size:strlen($req.data)});
            if ($ret <= 0) {
                print "send() failed and return $ret";
                break;
            }
        }

        # recv http response
        $rhttp = {sock:$sock, size:2048};
        $ret = recv($rhttp);
        if ($ret <= 0) {
            print "recv() head failed and return $ret";
            break;
        }

        $resp = parse_http($rhttp.msg); 
        if ($resp["content-length"] > $resp["content"][0]) {
            $rdata = {sock:$sock, size:$resp["content-length"]};
            $ret = recv($rdata);
            if ($ret <= 0) {
                print "recv() content failed and return $ret";
                break;
            }
            $content = json_decode("$rdata.msg");
            $resp["content"] = [strlen($rada.msg), $content];
        }
        break;
    }
    close($sock);
    return $resp;
}
